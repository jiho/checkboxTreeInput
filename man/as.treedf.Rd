% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/treedf.R
\name{as.treedf}
\alias{as.treedf}
\alias{as.treedf.data.frame}
\alias{as.treedf.Node}
\alias{is.treedf}
\title{Coerce to a Tree Data Frame (treedf)}
\usage{
as.treedf(x, ...)

\method{as.treedf}{data.frame}(x, pathName = "pathString",
  pathDelimiter = "/", ...)

\method{as.treedf}{Node}(x, ...)

is.treedf(x)
}
\arguments{
\item{x}{An R object.}

\item{...}{Passed to \code{\link[data.tree]{as.Node.data.frame}} when used with a data.frame that contains \code{pathName}; ignored otherwise.}

\item{pathName}{The name of the column containing the path of the current node. If this column exists in \code{x}, then it defines the structure of the tree, the data.frame is converted into a tree through \code{\link[data.tree]{as.Node.data.frame}}, and the result is turned into a \code{treedf}. If the column does not exist, then \code{x} is supposed to already have the structure of a \code{treedf}.}

\item{pathDelimiter}{The delimiter used to separate nodes in \code{pathName}.}
}
\description{
Functions to check if an object is a \code{treedf}, or coerce it if possible.
}
\details{
A \code{treedf} is a \code{data.frame} in which each line defines a node in a tree and is characterised by columns \describe{
\item{id}{the unique identifier of the node,}
\item{parent_id}{the identifier of the parent of the node,}
\item{name}{the (displayed) name of the node (optional),}
\item{selected}{logical, if TRUE, the node will be selected in \code{\link{checkboxTreeInput}} (optional),}
\item{opened}{logical, if TRUE, the node will be opened in \code{\link{checkboxTreeInput}} (optional).}
}
The structure of the tree is therefore defined by the relationship between \code{id} and \code{parent_id}.

Conversion functions are provided for various tree structures available in R. If the structure of the tree is simply defined by different columns of a data.frame, one per level (e.g. organisation, department, team or family, genus, species), join them in \code{pathString} and use this argument to convert the data.frame into a treedf (see examples).
}
\examples{
# definition of a tree through id and parent_id
x <- data.frame(id=c(1, 2, 3, 4), parent_id=c(NA, 1, 2, 1))
ui <- fluidPage(checkboxTreeInput(inputId="tree", tree=x))
server <- function(input, output) { }
if (interactive()) shinyApp(ui, server)

# definition of a tree by levels
x <- data.frame(
       organisation=rep(c("R", "MATLAB"), each=3),
       department=c("code", "code", "doc", "code", "doc", "maketting"),
       team=c("core", "graphics", "help", "central", "help", "bosses")
     )
x$pathString <- paste(x$organisation, x$department, x$team, sep="/")
x <- as.treedf(x)
ui <- fluidPage(checkboxTreeInput(inputId="tree", tree=x))
if (interactive()) shinyApp(ui, server)
}
